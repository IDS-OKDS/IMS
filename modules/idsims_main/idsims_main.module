<?php
/**
 * @file
 * Module for bespoke IDS IMS customisations
 */
define('IDSIMS_ENTITY_NEXT_ID_START', 100000);

/*
 * Implimentation of hook_init()
 */
function idsims_main_init() {
	drupal_add_js(drupal_get_path('module', 'idsims_main').'/js/idsims-main.js');
	drupal_add_css(drupal_get_path('module', 'idsims_main').'/css/idsims-main.css');
	// Include inline_entity_form.module integration.
	if (module_exists('inline_entity_form')) {
		module_load_include('inc', 'idsims_main', 'idsims_main.inline_entity_form');
	}
	module_load_include('inc', 'idsims_main', 'idsims_main.process_url_data');
}

/**
 * Implement hook_menu()
 */
function idsims_main_menu() {
	$items['admin/config/ids-ims'] = array(
    'title' => 'IDS IMS',
    'description' => 'Settings related to the IDS IMS.',
    'position' => 'left',
    'weight' => -15,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
	);
	$items['copy'] = array(
    'title' => 'Copy',
    'description' => 'Copy content from site to site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ids_main_copy_site_node_form'),
    'access arguments' => array(1),
    'access callback' => '_ids_main_copy_access_callback',
	'type' => MENU_CALLBACK,
	);
	return $items ;
}

//function _ids_main_copy_page_callback($copy_from_nid){
function ids_main_copy_site_node_form($form, &$form_state, $copy_from_nid){
	/*
	 * Because of the access callback we know that if we have got here then there must be a
	 * copy that is valid to make
	 */

	/*
	 * Load the node we are trying to copy
	 */
	$node_to_be_copied = node_load($copy_from_nid);
	$node_to_be_copied_site_tid = FALSE;
	if(isset($node_to_be_copied->field_site_ref[LANGUAGE_NONE][0]['tid'])){
		$node_to_be_copied_site_tid = $node_to_be_copied->field_site_ref[LANGUAGE_NONE][0]['tid'];
	}

	if($node_to_be_copied_site_tid){
		$copy_from_array = array(); /* nid => site_name */
		$copy_to_array = array(); /* site_tid => site_name */
		/*
		 * get all Site terms
		 */
		$site_terms = _ids_main_get_all_site_terms();
			
		/*
		 * Check the sites the logged in user can edit
		 */
		$sites_user_can_edit = _ids_main_get_sites_user_can_edit();

		/*
		 * Get all site versions
		 */
		$asset_id = _idsims_main_get_asset_id($node_to_be_copied, 'node');
		$site_versions_nids = _ids_main_get_all_site_abstracts_nids($asset_id);
		$existing_site_versions = entity_load('node', $site_versions_nids);

		$existing_site_versions_sites_arr = _ids_main_get_site_tids_from_nodes($existing_site_versions);

		foreach($site_terms as $site_term){
			/*
			 * If the Site version exists add to the COPY FROM array
			 */
			if(array_key_exists($site_term->tid, $existing_site_versions_sites_arr)){
				$nid = $existing_site_versions_sites_arr[$site_term->tid];
				$copy_from_array[$nid] = $site_term->name;
			} else {
				/*
				 * if this is a site the user can edit and the Site version doesn't alread exist
				 * then add to the COPY TO array
				 */
				if(in_array($site_term->tid, $sites_user_can_edit)){
					$copy_to_array[$site_term->tid] = $site_term->name;
				}
			}
		}

		/*
		 * simple version -- the user only has one editable site (that isn't the current node site)
		 * So go straight to the create page and pass the site param
		 */

		if(count($copy_from_array)==1 && count($copy_to_array)==1){
			foreach($copy_from_array as $nid => $site_name){
				$from_nid = $nid; /* only one */
				$from_site_name = $site_name;
			}
			foreach($copy_to_array as $tid => $site_name){
				$to_site_tid = $tid; /* only one */
				$to_site_name = $site_name;
			}

			_ids_main_create_new_site_version($from_nid, $to_site_tid, $from_site_name, $to_site_name);

		}

		/*
		 * complex version! -- the user needs to choose which Site they want to copy to (and from if there are multiple)
		 */
		$form['#attributes'] = array(
		    'enctype' => 'multipart/form-data'
		    );
		    $form['intro_text'] = array(
		    '#markup' => '<h2>Copy to Site</h2>'
		    . '<p>Copy a document from on Site to another, Choose form the options below and when ready select Copy.</p>',
		    );
		    $form['copy_from'] = array(
		    '#title' => t('Copy from'),
		    '#type' => 'select',
		    '#options' => $copy_from_array, 
		    '#default_value' => $copy_from_nid,
	    	'#value' => $copy_from_nid,
		    '#description' => t('The Site you are copying from.'),
		    );
		    $form['copy_to'] = array(
		    '#title' => t('Copy to'),
		    '#type' => 'select',
		    '#options' => $copy_to_array, 
		    '#description' => t('The Site you are copying to.'),
		    );
		    $form['submit'] = array(
		    '#type' => 'submit',
		    '#value' => t('Copy'),
		    '#submit' => array('ids_main_copy_site_node_form_submit'),
		    );
		    return $form;

	} else {
		drupal_set_message(t('Node trying to copy has no Site set'), 'error');
	}

	return FALSE;
}

function ids_main_copy_site_node_form_submit($form, &$form_state){
	$values = $form_state['values'];
	$complete_form = $form_state['complete form'];
	$from_nid = $values['copy_from'];
	$to_site_tid = $values['copy_to'];
	$from_site_name = $complete_form['copy_from']['#options'][$from_nid];
	$to_site_name = $complete_form['copy_to']['#options'][$to_site_tid];
	_ids_main_create_new_site_version($from_nid, $to_site_tid, $from_site_name, $to_site_name);
}


function _ids_main_create_new_site_version($from_nid, $to_site_tid, $from_site_name, $to_site_name){
	$new_node_copy = _ids_main_copy_node($from_nid, $to_site_tid);
	$new_nid = $new_node_copy->nid;
	if($new_nid){
		drupal_set_message('Created new ' . $to_site_name . ' copy of '. $from_site_name .' document.');
		drupal_goto('node/'. $new_nid .'/edit');
	} else {
		drupal_set_message(t('Copy could not be made'), 'error');
	}
}

function _ids_main_copy_node($nid, $site_tid = FALSE){
	// Load a node
	$node = node_load($nid);
	// unset version and node id's
	unset($node->nid);
	unset($node->vid);
	unset($node->path);
	// Save the copy
	node_save($node);
	// write new site reference if supplied
	if($site_tid){
		if(isset($node->field_site_ref)){
			_idsims_main_update_entity_field($node, 'field_site_ref', $site_tid, $delta = 0, $store_id = 'tid');
		}

	}
	field_attach_update('node', $node);
	return $node;
}


function _ids_main_copy_access_callback($nid){
	global $user;
	$access = TRUE;
	$document_node = node_load($nid);
	/* we only care about Document Abstract nodes (no other type can be copied) */
	if($document_node->type == 'ids_document'){
		/*
		 * get all Site terms
		 */
		$site_terms = _ids_main_get_all_site_terms();
		/*
		 * Get the Asset ID (object_id) of this Document node
		 */
		$asset_id = _idsims_main_get_asset_id($document_node, 'node');
		$site_versions_nids = _ids_main_get_all_site_abstracts_nids($asset_id);
		if($site_versions_nids){
			$number_of_existing_site_versions = count($site_versions_nids);
			$number_of_sites = count($site_terms);
			/*
			 * If we have as many site versions as there are sites then we can't make a copy
			 */
			if($number_of_existing_site_versions == $number_of_sites){
				$access = FALSE;
			} else {
				$access = FALSE;
				$existing_site_versions = entity_load('node', $site_versions_nids);
				/*
				 * Now check as an editor there is at least one site the user can create a copy for that
				 * doesn't already exist
				 */
				$existing_site_versions_sites_arr = _ids_main_get_site_tids_from_nodes($existing_site_versions);

				$sites_user_can_edit = _ids_main_get_sites_user_can_edit();
				foreach($sites_user_can_edit as $site_user_can_edit){
					if(!array_key_exists($site_user_can_edit, $existing_site_versions_sites_arr)){
						$access = TRUE;
					}
				}
			}
		}
	} else {
		$access = FALSE;
	}
	return $access;
}

/*
 * Return Site TIDs from all nodes passed
 */
function _ids_main_get_site_tids_from_nodes($node_arr){
	$existing_site_versions_sites_arr = array();
	foreach($node_arr as $node){
		if(isset($node->field_site_ref[LANGUAGE_NONE][0]['tid'])){
			$tid = $node->field_site_ref[LANGUAGE_NONE][0]['tid'];
			$existing_site_versions_sites_arr[$tid] = $node->nid;
		}
	}
	return $existing_site_versions_sites_arr;
}

/*
 * Return Node IDs of all Site versions of Document abstract nodes with passed Asset ID
 */
function _ids_main_get_all_site_abstracts_nids($asset_id){
	$site_versions_nids = FALSE;
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
	->entityCondition('bundle', 'ids_document')
	->fieldCondition('field_object_id', 'value', $asset_id, '=')
	->addMetaData('account', user_load(1)); // Run the query as user 1.

	$result = $query->execute();
	if (isset($result['node'])) {
		$site_versions_nids = array_keys($result['node']);
	}
	return $site_versions_nids;
}


/*
 * Gets the selected site from the user
 * This is the Site they are currently working with (more often that not set to the one they normally add Documents to)
 */
function _ids_main_get_users_selected_site($uid = 0){
	/* if $uid not set then get current user */
	global $user;
	if(!$uid){
		$uid = $user->uid;
	}
	$account = user_load($uid);
	if(isset($account->field_selected_site[LANGUAGE_NONE][0]['tid'])){
		return $account->field_selected_site[LANGUAGE_NONE][0]['tid'];
	}
	return FALSE;
}

/*
 * Get all sites user can edit
 */
function _ids_main_get_sites_user_can_edit($uid = 0){
	/* if $uid not set then get current user */
	global $user;
	if(!$uid){
		$uid = $user->uid;
	}
	$account = user_load($uid);
	$site_tid_arr = array();
	if(isset($account->field_site_ref[LANGUAGE_NONE][0]['tid'])){
		foreach($account->field_site_ref[LANGUAGE_NONE] as $site_ref){
			$site_tid_arr[] = $site_ref['tid'];
		}
	}
	return $site_tid_arr;
}

/*
 * Drupal language code from language term
 * Only used if alternative to ISO Two letter code e.g. Chinese ISO = zh Drupal = zh-hans (Simplified Chinese, Traditional  = zh-hant)
 */
function _ids_main_drupal_language_code_from_term($language_term){
	$code = $language_term->field_iso_two_code[LANGUAGE_NONE][0]['value'];
	if(isset($language_term->field_drupal_language_code[LANGUAGE_NONE][0]['value'])){
		if($language_term->field_drupal_language_code[LANGUAGE_NONE][0]['value']){
			$code = $language_term->field_drupal_language_code[LANGUAGE_NONE][0]['value'];
		}
	}
	return $code;
}

/*
 * get all terms in language taxonomy
 */
function _ids_main_get_all_language_terms(){
	static $language_terms;
	if(!isset($language_terms)){
		$vocabulary_object = taxonomy_vocabulary_machine_name_load('ids_language');
		$language_terms_tree = taxonomy_get_tree($vid = $vocabulary_object->vid, $parent = 0, $max_depth = NULL, $load_entities = TRUE);
		foreach($language_terms_tree as $language_term){
			$language_terms[$language_term->field_iso_two_code[LANGUAGE_NONE][0]['value']] = $language_term;
		}
	}
	return $language_terms;
}

/*
 * get all terms in site taxonomy
 */
function _ids_main_get_all_site_terms(){
	static $site_terms;
	if(!isset($site_terms)){
		$vocabulary_object = taxonomy_vocabulary_machine_name_load('ids_site');
		$site_terms_tree = taxonomy_get_tree($vid = $vocabulary_object->vid, $parent = 0, $max_depth = NULL, $load_entities = TRUE);
		foreach($site_terms_tree as $site_term){
			$site_terms[$site_term->tid] = $site_term;
		}
	}
	return $site_terms;
}

/*
 * Custom validaton for user_profile_form
 */
function _ids_main_user_profile_form_validate($form, &$form_state){
	/*
	 * Check that user has edit rights for Site that is their Selected Site
	 */
	$selected_site_valid = (in_array($form_state['values']['field_selected_site'][LANGUAGE_NONE][0], $form_state['values']['field_site_ref'][LANGUAGE_NONE])) ? TRUE:FALSE;
	if (!$selected_site_valid) {
		form_set_error('field_selected_site', t('You cannot have a Selected Site that\'s not in your availble Site list'));
	}
}

/*
 * Implimentation of hook_form_alter()
 */
function idsims_main_form_alter(&$form, &$form_state, $form_id) {
	if($form_id == 'user_profile_form'){
		/* add custom validation function to user account form */
		$form['#validate'][] = '_ids_main_user_profile_form_validate';
	}
	if($form_id == 'editableviews_entity_form_site_toggle'){
		$form['#submit'][] = '_idsims_main_editableviews_entity_form_site_toggle_submit_function';
		global $user;
		$sites_user_can_edit = _ids_main_get_sites_user_can_edit();
		$sites_terms = _ids_main_get_all_site_terms();
		$sites_options_arr = array();
		foreach($sites_user_can_edit as $site_user_can_edit_tid){
			foreach($sites_terms as $sites_term){
				if($sites_term->tid == $site_user_can_edit_tid){
					$sites_options_arr[$sites_term->tid] = $sites_term->name;
				}
			}
		}
		$form['user'][$user->uid]['field_selected_site'][LANGUAGE_NONE]['#options'] = $sites_options_arr;
	}
	/* Hide all revision information/functionality on edit forms */
	unset($form['revision_information']);
	if($form_id == 'ids_document_node_form'){
		if(arg(1) == 'add'){
			/*
			 * Set Site from User Selected Site field
			 */
			$user_selected_site_tid = _ids_main_get_users_selected_site();
			$form["field_site_ref"][LANGUAGE_NONE]['#default_value'] = array(
			0 => $user_selected_site_tid,
			);
				
			/*
			 * Set publish day/month to 01/01 as it's normally only the year they know
			 */
			$first_day_of_year = format_date(strtotime('now'), 'custom', 'Y', 'UTC') . '-01-01 00:00:00';
			$form["field_publication_date"][LANGUAGE_NONE][0]['#default_value'] = array(
			    'value' => $first_day_of_year,
			    'timezone' => 'UTC',  
			    'timezone_db' => 'UTC',
			);
		}
		/*
		 * Make sure Site and Object ID are not editable (as these are set programatically)
		 */
		$form['field_site_ref']['#disabled'] = TRUE;
		$form['field_object_id']['#disabled'] = TRUE;

		/*
		 * Reorder Authoring/Publishng info tabs on edit screens so that Publising Options are top and therefore open
		 */
		$form['options']['#weight'] = 90;
		$form['author']['#weight'] = 95;
		/*
		 * Hide Promote/Sticky options, we don't care about these
		 */
		unset($form['options']['promote']);
		unset($form['options']['sticky']);

		_idsims_main_entity_translate_ids_document_node_form_alter($form, $form_state, $form_id);
	}
}

/*
 * Implimentation of hook_inline_entity_form_entity_form_alter()
 */
function idsims_main_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
	if ($entity_form['#entity_type'] == 'ids_document_url') {
		/* more title in to Fieldset Group "more" -- can't do this in the Admin GUI as Title is special field */
		if(!in_array('title', $entity_form['#groups']['group_more']->children)){
			$entity_form['#groups']['group_more']->children[] = 'title';
			$entity_form['#group_children']['title'] = 'group_more';
		}
	}
}


/**
 * Implementation of hook_preprocess_html
 */
function idsims_main_preprocess_html(&$vars) {
	global $user;
	$account = user_load($user->uid);
	$vars['idsims_site_id'] = '';
	$vars['idsims_site_color_1'] = '';
	$vars['idsims_site_color_2'] = '';
	$vars['idsims_site_logo_url'] = '';
	if(isset($account->field_selected_site[LANGUAGE_NONE][0]['tid'])){
		$site_term = taxonomy_term_load($account->field_selected_site[LANGUAGE_NONE][0]['tid']);
		if($site_term){
			$vars['idsims_site_id'] = $site_term->field_machine_name[LANGUAGE_NONE][0]['value'];
			$vars['idsims_site_colour_1'] = $site_term->field_site_colour_1[LANGUAGE_NONE][0]['value'];
			$vars['idsims_site_colour_2'] = $site_term->field_site_colour_2[LANGUAGE_NONE][0]['value'];
			$vars['idsims_site_logo_url'] = file_create_url($site_term->field_site_logo[LANGUAGE_NONE][0]['uri']);
		}
	}
}

/**
 * Implementation of hook_preprocess_page
 */
function idsims_main_preprocess_page(&$vars) {
	$entity_type = 'ids_document';
	$vars['idsims_document_site_logo_url'] = '';
	$vars['idsims_document_num_translations'] = 0;
	if(isset($vars['node'])){
		if(isset($vars['node']->translations->data)){
			$vars['idsims_document_num_translations'] = count($vars['node']->translations->data);
		}
		if($vars['node']->type == $entity_type){
			if(isset($vars['node']->field_site_ref)){
				$field_language = _idsims_main_field_language($entity_type, $vars['node'], 'field_site_ref');
				if(isset($vars['node']->field_site_ref[$field_language][0]['tid'])){
					$site_term = taxonomy_term_load($vars['node']->field_site_ref[$field_language][0]['tid']);
					if($site_term){
						$vars['idsims_document_site_logo_url'] = file_create_url($site_term->field_site_logo[LANGUAGE_NONE][0]['uri']);
					}
				}
			}
		}
	}
}

/*
 * Implimentaion of hook_entity_presave
 *
 * 1. Create Asset ID (object_id) for new Nodes/Terms
 * 2. Update shared fields across sites/branches
 * 3. Create references to Document Abstracts on Document URL nodes
 */
function idsims_main_entity_presave($entity, $type) {
	/* 1. Create Asset ID (object_id) for new Nodes/Terms -- Document URL Entity works differently, it gets it's Asset ID from parent Document node */
	if($type != 'ids_document_url'){
		$asset_id = _idsims_main_get_asset_id($entity, $type);
	}
	if($type == 'node'){
		/* 2. Update shared fields across sites/branches */
		_idsims_main_update_shared_fields($entity, $type, $asset_id);
		/* 3. Create references to Document Abstracts on Document URL entities */
		_idsims_main_update_references_to_document_abstracts($entity, $type, $asset_id);
	}
	if($type == 'ids_document_url'){
		/* get/save info for Full Document URLs -- If batch import NOT running OR if batch is runnning and import mime type on import global setting set */
		if(!variable_get('idsims_import_batch_process_running', 0) ||
		(variable_get('idsims_import_do_set_mime_types', 0) && variable_get('idsims_import_batch_process_running', 0)) ){
			_idsims_main_save_full_document_url_info($entity);
		}
	}
}

/*
 * Return the Vocab ID from the machine name
 */
function _idsims_main_get_vid_from_vocab_machine_name($vocab_machine_name){
	return db_query('SELECT vid FROM {taxonomy_vocabulary} WHERE machine_name = :machine_name', array(':machine_name' => $vocab_machine_name))->fetchField();
}

/*
 * Add a term tid to a term reference field on a given entity
 */
function _idsims_main_apply_term_to_entity_field(&$entity, $field_ref, $tid, $type = 'node'){
	$field_ref = 'field_' . $field_ref;
	$cnt = 0;
	$found = FALSE;
	$field_language = _idsims_main_field_language($type, $entity, $field_ref);
	if(isset($entity->{$field_ref}[$field_language])){
		foreach($entity->{$field_ref}[$field_language] as $term_ref){
			if($term_ref['tid'] == $tid){
				$found = TRUE;
			}
			$cnt++;
		}
	} else {
		$entity->{$field_ref}[$field_language] = array();
	}
	if(!$found && $tid){
		$entity->{$field_ref}[$field_language][$cnt]['tid'] = $tid;
	}
}

/**
 * Create a taxonomy term and return the tid.
 */
function _idsims_main_create_taxonomy_term($name, $vid, $parent_id = 0) {
	//drupal_set_message("$name, $vid, $parent_id ");
	$term = new stdClass();
	$term->name = $name;
	$term->vid = $vid;
	$term->parent = array($parent_id);
	taxonomy_term_save($term);
	return $term->tid;
}

function _idsims_main_get_url_mime_type($url) {
	$buffer = file_get_contents($url);
	$finfo = new finfo(FILEINFO_MIME_TYPE);
	return $finfo->buffer($buffer);
}


/*
 * sanitise the filename (from a URL)
 */
function _idsims_main_sanitize_file_name($filename) {
	$filename_raw = $filename;
	$special_chars = array("?", "[", "]", "/", "\\", "=", "<", ">", ":", ";", ",", "'", "\"", "&", "$", "#", "*", "(", ")", "|", "~", "`", "!", "{", "}");
	$filename = str_replace($special_chars, '', $filename);
	$filename = preg_replace('/[\s-]+/', '-', $filename);
	$filename = trim($filename, '.-_');
	return $filename;
}



function _idsims_main_field_language($type, $entity, $field_id){
	$field_language = field_language($type, $entity, $field_id);
	if(!$field_language){
		$field_language = LANGUAGE_NONE;
	}
	return $field_language;
}


/*
 *  return Asset ID from entity or add if doesn't exist.
 */
function _idsims_main_get_asset_id(&$entity, $type){
	/* Add an Asset ID if there isn't one */
	$asset_id = FALSE;
	$field_language = _idsims_main_field_language($type, $entity, 'field_object_id');

	$objectid_set = TRUE;
	if(!isset($entity->field_object_id[$field_language])){
		$objectid_set = FALSE;
	} elseif(!isset($entity->field_object_id[$field_language][0]['value'])){
		$objectid_set = FALSE;
	} elseif(!$entity->field_object_id[$field_language][0]['value']){
		$objectid_set = FALSE;
	}
	if(!$objectid_set){
		$new_object_id_num = variable_get('idsims_entity_next_id', IDSIMS_ENTITY_NEXT_ID_START);
		$new_object_id_num++;
		$new_object_id = FALSE;
		if($type == 'node'){
			$new_object_id = 'A' . $new_object_id_num;
		}
		if($type == 'taxonomy_term'){
			if($entity->vocabulary_machine_name == 'ids_countries'){
				$new_object_id = 'A' . $new_object_id_num;
			} else {
				$new_object_id = 'C' . $new_object_id_num;
			}
		}
		if($new_object_id && isset($entity->field_object_id)){
			drupal_set_message('Object ID (' . $new_object_id . ') created for entity (' . $type . ')');
			_idsims_main_update_entity_field($entity, 'field_object_id', $new_object_id);
			variable_set('idsims_entity_next_id', $new_object_id_num);
		}
		$asset_id = $new_object_id;
	} else {
		$asset_id = $entity->field_object_id[$field_language][0]['value'];
	}
	return $asset_id;
}


/*
 * Update shared fields across sites/branches
 */
function _idsims_main_update_shared_fields(&$entity, $type, $asset_id){
	/*
	 * Array of sheared field IDs -- add to this if you want this field to update across all sites/branches
	 */
}


/*
 * updates an entity field item for all language versions
 */

function _idsims_main_update_entity_field(&$entity, $field_id, $value, $delta = 0, $store_id = 'value'){
	if(!isset($entity->{$field_id})){
		$entity->{$field_id} = array();
		$entity->{$field_id}[LANGUAGE_NONE] = array();
	}
	foreach($entity->{$field_id} as $lang => $field_obj){
		$entity->{$field_id}[$lang][$delta][$store_id] = $value;
	}
}

/*
 * Code to remove stupid N/A option on radio buttons
 */
function idsims_main_element_info_alter(&$type) {
	$type['radios']['#process'][] = '_idsims_main_remove_radio_na';
}

function _idsims_main_remove_radio_na($element) {
	unset($element['#options']['_none']);
	unset($element['_none']);
	return $element;
}

/*
 * Submit handler for Site Toggle View (to supress messages for User form update)
 */
function _idsims_main_editableviews_entity_form_site_toggle_submit_function(){
	unset($_SESSION['messages']);
}

/*
 *  this function returns the depth of a tid
 *  1 = first level
 *  2 = second level etc...
 */
function _idsims_main_get_term_depth($tid) {
  $parent = db_query("SELECT parent FROM {taxonomy_term_hierarchy} WHERE tid = :tid", array(':tid' => $tid))->fetchField();
  if($parent == 0) {
    return 1;
  }else  {
    return 1+_idsims_main_get_term_depth($parent);
  }
}

/*
 *  this function returns the path of a term as a string delimited with .
 *  e.g parenttermname.termname
 */
function _idsims_main_get_term_path($tid) {
  $parent = db_query("SELECT parent FROM {taxonomy_term_hierarchy} WHERE tid = :tid", array(':tid' => $tid))->fetchField();
  $term = taxonomy_term_load($tid);
  if($parent == 0) {
    return trim($term->name);
  }else  {
    return _idsims_main_get_term_path($parent) . '.' . trim($term->name);
  }
}

/*
 *  this function returns an array of parent term ids (tids) from a given tid 
 */
function _idsims_main_get_parent_tid_array(&$parent_tids, $tid) {
  $parent = db_query("SELECT parent FROM {taxonomy_term_hierarchy} WHERE tid = :tid", array(':tid' => $tid))->fetchField();
  if($parent != 0) {
  	$parent_tids[] = $parent;
    _idsims_main_get_parent_tid_array($parent_tids, $parent);
  }
}

/*
 *  this function returns an array of child term ids (tids) from a given parent tid 
 */
function _idsims_main_get_child_tid_array($parent_tid) {
  $result = db_query("SELECT tid FROM {taxonomy_term_hierarchy} WHERE parent = :tid", array(':tid' => $parent_tid));
  $children = FALSE;
  foreach ($result as $record) {
  	if(!$children){
  		$children = array();
  	}
  	$children[] = $record->tid;
  }
  return $children;
}

/*
 * this function returns a numeric asset id 
 */
function _idsims_main_get_numeric_asset_id($type, $eid){
	$entity = FALSE;
	if($type == 'taxonomy_term'){
		$entity = taxonomy_term_load($eid);
	}
	if($type == 'node'){
		$entity = node_load($eid);
	}
	if(!$entity){
		return FALSE;
	}
	$asset_id = _idsims_main_get_asset_id($entity, $type);
	return substr($asset_id, 1); /*remove 'C' at front of category ID and 'A' in front of asset ID */
}

/*
 * get lang codes lookup for old oryx IDs, 
 * this function is used for data import from Oryx
 * and for Solr output.
 * On review this could be removed? But Solr output will 
 * need to be considered/reworked
 */
function _idsims_main_get_oryx_id_iso_lang_arr(){
	static $lang_code_arr;
	if(!isset($lang_code_arr)){
		$language_terms =  _ids_main_get_all_language_terms();
		$lang_code_arr = array();
		foreach($language_terms as $language_term){
			$drupal_lang_code = _ids_main_drupal_language_code_from_term($language_term);
			$oryx_legacy_id = $language_term->field_oryx_id[LANGUAGE_NONE][0]['value'];
			$lang_code_arr[$oryx_legacy_id] = $drupal_lang_code;
		}
	}
	return $lang_code_arr;
}


