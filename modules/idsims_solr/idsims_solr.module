<?php
/**
 * @file
 * Module for IDS IMS integration with Solr search
 */

/**
 * Alter Solr documents before they are sent to Solr for indexing.
 *
 * @param array $documents
 *   An array of SearchApiSolrDocument objects ready to be indexed, generated
 *   from $items array.
 * @param SearchApiIndex $index
 *   The search index for which items are being indexed.
 * @param array $items
 *   An array of items being indexed.
 */
function idsims_solr_search_api_solr_documents_alter(array &$documents, SearchApiIndex $index, array $items) {

	$valid_server_machine_names = array('eldis_ims_solr_server', 'bridge_ims_solr_server');

	$server = $index->server();
	$server_machine_name = $server->machine_name;
	
	if(!in_array($server_machine_name, $valid_server_machine_names)){
		return;
	}
	
	$server_site_machine_name_arr = explode('_', $server_machine_name);
	$server_site_machine_name = $server_site_machine_name_arr[0];

	$sites_terms = _ids_main_get_all_site_terms();
	$language_terms = _ids_main_get_all_language_terms();	
	
	foreach ($documents as $document_key => $document) {
		$index_id_arr = $document->getField('index_id');
		$index_id = $index_id_arr['value'];
		$item_id_arr = $document->getField('item_id');
		$index_id_arr = explode('_', $index_id);
		if($index_id_arr[count($index_id_arr)-1] == 'taxonomy'){
			$taxonomy_term = taxonomy_term_load($item_id_arr['value']);
			if($taxonomy_term){
				/* Index TAXONOMY TERMS */
				$vocabulary_machine_name = $taxonomy_term->vocabulary_machine_name;
				/* Object ID (object_id) */
				$field_language = _idsims_main_field_language($vocabulary_machine_name, $taxonomy_term, 'field_site_ref');
				if(!isset($taxonomy_term->field_object_id[$field_language])){
					drupal_set_message('NO object ID set for :' . $taxonomy_term->name);
				}
				$object_id = $taxonomy_term->field_object_id[$field_language][0]['value'];
				$document->setField('object_id', $object_id);
				/* Title (title_field) */
				$document->setField('title', $taxonomy_term->name);
				/* Site (taken from taxonomy vocabulary machine name e.g. ids_bridge_themes) */
				$vocabulary_machine_name_arr = explode('_', $vocabulary_machine_name);
				$site_machine_name = $vocabulary_machine_name_arr[1];
				/*Object type -- remove plural */
				$object_type = (isset($vocabulary_machine_name_arr[2])) ? substr($vocabulary_machine_name_arr[2], 0, -1):$vocabulary_machine_name_arr[1];
				$document->setField('site', $site_machine_name);
				/* We need to write the timestamp out explicitly even though Drupal adds it anyway
				 * as it needs to be in this format for the API or it errors
				 */
				$timestamp_now = date("Y-m-d\Th:i:s\Z");
				$document->setField('timestamp', $timestamp_now);	

				/* Description/Abstract */
				$document->setField('description', $taxonomy_term->description);
				
				if($site_machine_name == 'countries'){
					/* 
					 * Countries work differently to other taxonomies (behave as Assets)
					 */
					$site_machine_name = $server_site_machine_name;
					$object_type = 'Country';
					/* ISO number/codes */
					$iso_data = $taxonomy_term->field_iso_three_code[$field_language][0]['value'];
					$document->setField('iso_three_letter_code', $iso_data);
					$iso_data = $taxonomy_term->field_iso_two_code[$field_language][0]['value'];
					$document->setField('iso_two_letter_code', $iso_data);
					$iso_data = $taxonomy_term->field_iso_number[$field_language][0]['value'];
					$document->setField('iso_number', $iso_data);
					/* Asset ID (asset_id) */
					$assetid = substr($taxonomy_term->field_object_id[$field_language][0]['value'], 1);/*remove 'A' at front of asset ID */
					$document->setField('asset_id', $assetid);
					/* Website URL */
					$website_url = '';
					if($site_machine_name == 'bridge'){
						$website_url = 'http://www.bridge.ids.ac.uk/go/display&amp;type=Document&amp;id=' . $assetid;
					}
					if($site_machine_name == 'eldis'){
						$website_url = 'http://www.eldis.org/go/country-profiles/&country=' . $assetid;
					}
					if($website_url){
						$document->setField('website_url', $website_url);
					}
					/* Country name */
					$document->setField('country_name', $taxonomy_term->name);
					/* Alternative name */
					$alternative_name = $taxonomy_term->field_alternative_name[$field_language][0]['value'];
					$document->setField('alternative_name', $alternative_name);
					/* Category Region Array */
					$category_region_ids = array();
					$category_region_objects = array();
					if(isset($taxonomy_term->field_region_eldis[$field_language][0]['tid'])){
						foreach($taxonomy_term->field_region_eldis[$field_language] as $region_tid_obj){
							$region_tid = $region_tid_obj['tid'];
							$region_term = taxonomy_term_load($region_tid);
							$region_object_id = $region_term->field_object_id[LANGUAGE_NONE][0]['value'];
							$document->addField('category_region_ids', $region_object_id);
							$category_region_object = _idsims_solr_build_category_object_arr($region_tid, $region_term, 'region');
							if($category_region_object){
								$category_region_objects[] = $category_region_object;
							}
						}
					}
					if(count($category_region_objects)){
						$xmlString = _idsims_solr_build_list_object_array_field('region', $category_region_objects);
						$document->setField('category_region_array', $xmlString);
					}
				} else {
					/* Category ID (category_id) */
					$category_id = substr($object_id, 1);/*remove 'C' at front of category ID */
					$document->setField('category_id', $category_id);

					/* Category path (category_path) */
					$category_path = _idsims_main_get_term_path($taxonomy_term->tid);
					$document->setField('category_path', $category_path);
					
					/* Category path sort (category_path_sort) */
					$category_path_sort = str_replace(' ', '_', $category_path);
					$document->setField('category_path_sort', $category_path_sort);					
					
					/* Category term level (also wries cat_level) */
					$level = _idsims_main_get_term_depth($taxonomy_term->tid);
					$document->setField('level', $level);
					/* Parent array */
					$parent_tids = array();
					_idsims_main_get_parent_tid_array($parent_tids, $taxonomy_term->tid);
					$category_objects = array();
					foreach($parent_tids as $parent_tid){
						$category_object = _idsims_solr_build_category_object_arr($parent_tid, $term = FALSE, $object_type);
						if($category_object){
							$category_objects[] = $category_object;
						}
					}
					if(count($category_objects)){
						$xmlString = _idsims_solr_build_list_object_array_field('parent', $category_objects);
						$document->setField('parent_object_array', $xmlString);
					}
					/* First Parent / Super Parent (vocabulary ID) */
					$oryx_top_level_category_id = _idsims_solr_get_oryx_id_top_level_categories($taxonomy_term->vid);
					if(count($parent_tids)){
						$cat_first_parent = _idsims_main_get_numeric_asset_id('taxonomy_term', $parent_tids[0]);
						$document->setField('cat_first_parent', $cat_first_parent);
						$document->setField('toplevel_object_id', $cat_first_parent);
						$cat_parent_tid = $parent_tids[count($parent_tids)-1];
						$document->setField('cat_parent', _idsims_main_get_numeric_asset_id('taxonomy_term', $cat_parent_tid));
						$cat_parent_term = taxonomy_term_load($cat_parent_tid);
						$cat_parent_object_id = _idsims_main_get_asset_id($cat_parent_term, 'taxonomy_term');
						if($cat_parent_object_id){
							$document->setField('parent_object_id', $cat_parent_object_id);
						}
					} else {
						$document->setField('cat_first_parent', $category_id);
						$document->setField('toplevel_object_id', 'C' . $category_id);
						$document->setField('cat_parent', $oryx_top_level_category_id);
						$document->setField('parent_object_id', 'C' . $oryx_top_level_category_id); /* for backwards compatibility! */
					}
					$document->setField('cat_superparent', $oryx_top_level_category_id);
					
					$document->setField('superparent_object_id', 'C' . $oryx_top_level_category_id);
					/* Child array */
					$child_tids = _idsims_main_get_child_tid_array($taxonomy_term->tid);
					$category_objects = array();
					foreach($child_tids as $child_tid){
						$category_object = _idsims_solr_build_category_object_arr($child_tid, $term = FALSE, $object_type);
						if($category_object){
							$category_objects[] = $category_object;
						}
					}
					if(count($category_objects)){
						$xmlString = _idsims_solr_build_list_object_array_field('child', $category_objects);
						$document->setField('children_object_array', $xmlString);
					}
					if(isset($taxonomy_term->field_archived[LANGUAGE_NONE][0]['value'])){
						$archived = ($taxonomy_term->field_archived[LANGUAGE_NONE][0]['value']) ? 'true':'false';
						$document->setField('archived', $archived);
					}
				}
				$document->setField('object_type', $object_type);
			}
		} else {
			/* Index NODES */
			$node = node_load($item_id_arr['value']);
			if($node){

				$field_language = _idsims_main_field_language($node->type, $node, 'field_site_ref');
				$site_term_tid = $node->field_site_ref[$field_language][0]['tid'];
				$site_term = taxonomy_term_load($site_term_tid);

				/* Object ID (object_id) */
				$document->setField('object_id', $node->field_object_id[$field_language][0]['value']);

				/* Object type */
				$object_type = 'Document';
				if($node->type == 'ids_organisation'){
					$object_type = 'Organisation';
				}
				$document->setField('object_type', $object_type);

				/* Asset ID (asset_id) */
				$assetid = substr($node->field_object_id[$field_language][0]['value'], 1);/*remove 'A' at front of asset ID */
				$document->setField('asset_id', $assetid);

				/* Site (site_ref) */
				$site_ref_tid = $node->field_site_ref[$field_language][0]['tid'];
				$site_machine_name = $sites_terms[$site_ref_tid]->field_machine_name[LANGUAGE_NONE][0]['value'];
				$document->setField('site', $site_machine_name);

				/* Title (title_field) */
				$document->setField('title', $node->title_field[$field_language][0]['value']);

				/* We need to write the timestamp out explicitly even though Drupal adds it anyway
				 * as it needs to be in this format for the API or it errors
				 */
				$timestamp_now = _idsims_solr_uxix_date_to_solr_friendly_date();
				$document->setField('timestamp', $timestamp_now);

				/* Description/Abstract */
				$document->setField('description', $node->body[$field_language][0]['value']);
				
				/* Regions (field_SITE_regions) */
				_idsims_solr_build_category_fields($document, $node, 'region', $site_machine_name, $object_xml = FALSE);

				/* Subjects (field_SITE_subjects) */
				_idsims_solr_build_category_fields($document, $node, 'subject', $site_machine_name);

				/* Theme (field_SITE_themes) */
				_idsims_solr_build_category_fields($document, $node, 'theme', $site_machine_name);
				
				/* Collections (field_collections) (NEW)*/
				_idsims_solr_build_category_fields($document, $node, 'collection');

				/* Set date created/updated */
				$timestamp = _idsims_solr_uxix_date_to_solr_friendly_date($node->created);
				$document->setField('date_created', $timestamp);
				$timestamp = _idsims_solr_uxix_date_to_solr_friendly_date($node->changed);
				$document->setField('date_updated', $timestamp);
				
				/* Country Focus country_focus */
				$country_focus_objects = array();
				foreach($node->field_countries[$field_language] as $country_item){
					$country_tid =  $country_item['tid'];
					$country_term = taxonomy_term_load($country_item['tid']);
					$country_object_id = $country_term->field_object_id[LANGUAGE_NONE][0]['value'];
					$document->addField('country_focus', $country_term->name);
					$document->addField('country_focus_ids', $country_object_id);
					$country_focus_object = _idsims_solr_build_category_object_arr($country_tid, $country_term, 'country');
					if($country_focus_object){
						$country_focus_object_xml = _idsims_solr_build_list_object_output($country_focus_object, 'country');
						$document->addField('country_focus_objects', $country_focus_object_xml);
						$country_focus_objects[] = $country_focus_object;
					}
				}
				/* Country Focus Array: country_focus_array */
				if(count($country_focus_objects)){
					$xmlString = _idsims_solr_build_list_object_array_field('country', $country_focus_objects);
					$document->setField('country_focus_array', $xmlString);
				}				
				
				/* Keyword */
				foreach($node->field_tags[$field_language] as $keyword_item){
					$keyword_term = taxonomy_term_load($keyword_item['tid']);
					$document->addField('keyword', $keyword_term->name);
				}
				
				/* Website URL */
				$website_url = '';
				if($site_machine_name == 'bridge'){
					$website_url = 'http://www.bridge.ids.ac.uk/go/display&amp;type=' . $object_type . '&amp;id=' . $assetid;
				}
				if($site_machine_name == 'eldis'){
					$website_url = 'http://www.eldis.org/go/display&type=' . $object_type . '&id=' . $assetid;
				}
				if($website_url){
					$document->setField('website_url', $website_url);
				}
				
				/*
				 * DOCUMENT NODES
				 */
				if($node->type == 'ids_document'){

					$author_collection_ids = array();
					foreach($node->field_authors_collection[$field_language] as $author_collection_item){
						$author_collection_id = $author_collection_item['value'];
						$author_collection_ids[] = $author_collection_id;
					}

					if(count($author_collection_ids)){
						$author_collection_entities = entity_load('field_collection_item', $author_collection_ids);
						$author_list_objects = array();
						foreach($author_collection_entities as $collection_entity_id => $author_collection_entity){
							if(isset($author_collection_entity->field_author_ref[LANGUAGE_NONE][0]['target_id'])){
								$author_term = taxonomy_term_load($author_collection_entity->field_author_ref[LANGUAGE_NONE][0]['target_id']);
								$author_name = $author_term->name;
								$is_editor = ($author_collection_entity->field_is_editor[LANGUAGE_NONE][0]['value']) ? 1:0;
								$author_output = $author_name;
								if($is_editor){
									$author_output .= ' (ed)';
								}
								/* standard author field */
								//drupal_set_message('author_output='.$author_output);
								$document->addField('author', $author_output);

								/* author array */
								$author_list_object = array();
								$author_list_object['first_name'] = $author_term->field_first_name[LANGUAGE_NONE][0]['value'];
								$author_list_object['last_name'] = $author_term->field_last_name[LANGUAGE_NONE][0]['value'];
								$author_list_object['is_editor'] = $is_editor;
								$author_list_objects[] = $author_list_object;
							}
						}
						/* Author Array -- (NEW) */
						if(count($author_list_objects)){
							$xmlString = _idsims_solr_build_list_object_array_field('author', $author_list_objects);
							$document->setField('author_array', $xmlString);
						}
					}

					/* Document medium (change to an array? Keeping inline with old API which is single value string) */
					foreach($node->field_media[$field_language] as $document_medium_item){
						$document_medium_term = taxonomy_term_load($document_medium_item['tid']);
						$document->addField('document_medium', $document_medium_term->name);
						break;
					}

					/* Document types */
					foreach($node->field_document_medium[$field_language] as $document_medium_item){
						$document_medium_term = taxonomy_term_load($document_medium_item['tid']);
						$document->addField('document_medium', $document_medium_term->name);
					}

					/* Et al. */
					if(isset($node->field_et_al[$field_language][0]['value'])){
						$et_al_value = ($node->field_et_al[$field_language][0]['value']) ? 'true':'false';
						$document->setField('et_al', $et_al_value);
					}

					/* Headline */
					if(isset($node->field_headline[$field_language][0]['value'])){
						$document->setField('headline', $node->field_headline[$field_language][0]['value']);
					}

					/* Translations */
					/* Language ID */
					if(isset($node->translations->data)){
						$lang_list_objects = array();
						foreach($node->translations->data as $lang_iso_code => $translation_data){
							$oryx_lang_id = _idsims_solr_iso_code_to_ids_api_lang_id_for_drupal($lang_iso_code);
							$document->addField('language_id', $oryx_lang_id);
							$document->addField('metadata_languages', $lang_iso_code);
							$lang_list_object = array();
							$lang_list_object['isocode'] = $lang_iso_code;
							if(isset($node->title_field[$lang_iso_code][0]['value'])){
								$lang_list_object['title'] = htmlspecialchars($node->title_field[$lang_iso_code][0]['value']);
							}
							if(isset($node->body[$lang_iso_code][0]['value'])){
								$lang_list_object['description'] = htmlspecialchars($node->body[$lang_iso_code][0]['value']);
							}
							if(isset($node->field_headline[$lang_iso_code][0]['value'])){
								$lang_list_object['headline'] = htmlspecialchars($node->field_headline[$lang_iso_code][0]['value']);
							}
							$lang_list_object['language_id'] = $oryx_lang_id;
							$lang_list_objects[] = $lang_list_object;
						}
					}
					/* Language Array */
					if(count($lang_list_objects)){
						$xmlString = _idsims_solr_build_list_object_array_field('language', $lang_list_objects);
						$document->setField('language_array', $xmlString);
					}

					/* Language Name (change to an array using $node->translations above? Keeping inline with old API which is single value string) */
					if(isset($language_terms[$node->language]->name)){
						$document->setField('language_name', $language_terms[$node->language]->name);
					} else {
						drupal_set_message('Language not set for node(' . $node->nid . ') asset ID:' . $assetid);
					}

					/* Licence Type */
					foreach($node->field_licence_type_term[$field_language] as $licence_type_item){
						$licence_type_term = taxonomy_term_load($licence_type_item['tid']);
						$document->addField('licence_type', $licence_type_term->name);
						break;
					}

					/*
					 * Permission to Host
					 */
					if(isset($node->field_permission_to_host_info[$field_language][0]['value'])){
						$document->setField('permission_to_host_info', $node->field_permission_to_host_info[$field_language][0]['value']);
					}
					
					/* Corporate Author (corporate_author) */
					
					if(isset($node->field_corporate_author_text[$field_language][0]['value'])){
						foreach($node->field_corporate_author_text[$field_language] as $corporate_author_text_obj){
							$document->setField('corporate_author', $corporate_author_text_obj['value']); /* Note this only writes the last corporate author found - legacy bug maintained for backwards compatibility - use corporate_author_name field */
							$document->addField('corporate_author_name', $corporate_author_text_obj['value']);
						}
					}

					/* Publication date / year */
					$publication_date_raw = $node->field_publication_date[$field_language][0]['value'];
					$timestamp = _idsims_solr_drupal_field_date_to_solr_friendly_date($publication_date_raw);
					$document->setField('publication_date', $timestamp);
					$publication_date_raw_arr = explode('-', $publication_date_raw);
					$document->setField('publication_year', $publication_date_raw_arr[0]);

					/* Publisher ID publisher_id Publisher Name (publisher) and prep of publisher_array and pub country */
					$publisher_org_country = FALSE;
					$publisher_objects = array();
					foreach($node->field_publishers[$field_language] as $publisher_item){
						$publisher_entity_id =  $publisher_item['target_id'];
						$publisher_node = node_load($publisher_entity_id);
						if(isset($publisher_node->field_object_id[LANGUAGE_NONE][0]['value'])){
							if(isset($publisher_node->field_object_id[LANGUAGE_NONE][0]['value'])){
								$publisher_object_id = $publisher_node->field_object_id[LANGUAGE_NONE][0]['value'];
								$document->addField('publisher_id', $publisher_object_id);
								$document->setField('publisher', $publisher_node->title); /* Note this only writes the last publisher found - legacy bug maintained for backwards compatibility - use publisher_name field */
								$document->addField('publisher_name', $publisher_node->title);
								$this_publisher_org_country = '';
								if(isset($publisher_node->field_location_country[LANGUAGE_NONE][0]['tid'])){
									$country_term = taxonomy_term_load($publisher_node->field_location_country[LANGUAGE_NONE][0]['tid']);
									$this_publisher_org_country = $country_term->name;
								}								
								if(!$publisher_org_country){
									$publisher_org_country = $this_publisher_org_country;
								}
								$publisher_object = array();
								$publisher_object['object_id'] = $publisher_object_id;
								$publisher_object['object_type'] = 'Organisation';
								$publisher_object['object_name'] = $publisher_node->title;
								if($this_publisher_org_country){
									$publisher_object['Country'] = $this_publisher_org_country;
								}
								$publisher_object['role'] = 'Publisher';
								if(isset($publisher_node->field_object_id[LANGUAGE_NONE][0]['value'])){
									
								}
								$publisher_objects[] = $publisher_object;
							}
						}
					}
					/* Publisher Array: publisher_array */
					if(count($publisher_objects)){
						$xmlString = _idsims_solr_build_list_object_array_field('publisher', $publisher_objects);
						$document->setField('publisher_array', $xmlString);
					}

					/* Publisher Country publisher_country */
					$publisher_country = FALSE;
					if(isset($node->field_country_of_publication[$field_language][0]['tid'])){
						$country_term = taxonomy_term_load($node->field_country_of_publication[$field_language][0]['tid']);
						$publisher_country = $country_term->name;
					}
					if(!$publisher_country){
						$publisher_country = $publisher_org_country;
					}
					if($publisher_country){
						$document->setField('publisher_country', $publisher_country);
					}

					/* Document URLs */
					$document_url_entity_id_arr = array();
					foreach($node->field_document_urls[$field_language] as $document_url_item){
						$document_url_entity_id_arr[] = $document_url_item['target_id'];
					}
					$document_url_objects = array();
					if(count($document_url_entity_id_arr)){
						$ids_document_url_entities = entity_load('ids_document_url', $document_url_entity_id_arr);
						foreach($ids_document_url_entities as $entity_id => $ids_document_url_entity){
							/* URL is either an uploaded file (Drupal file path) or a remote URL (text) */
							if(isset($ids_document_url_entity->field_upload_document[LANGUAGE_NONE][0]['uri'])){
								$uri = $ids_document_url_entity->field_upload_document[LANGUAGE_NONE][0]['uri'];
								$full_uri = file_create_url($uri);
								$the_url = $full_uri;
							} else {
								$the_url = $ids_document_url_entity->field_document_url[LANGUAGE_NONE][0]['value'];
							}
							$document->addField('urls', $the_url);
							/* document url array */
							$document_url_object = array();
							$document_url_object['url'] = $the_url;
							if(isset($ids_document_url_entity->field_cover_image[LANGUAGE_NONE][0]['uri'])){
								$uri = $ids_document_url_entity->field_cover_image[LANGUAGE_NONE][0]['uri'];
								$full_uri = file_create_url($uri);
								$document_url_object['cover_image_url'] = $full_uri;
							}
							if(isset($ids_document_url_entity->field_language_ref[LANGUAGE_NONE][0]['tid'])){
								$term = taxonomy_term_load($ids_document_url_entity->field_language_ref[LANGUAGE_NONE][0]['tid']);
								$document_url_object['language_name']  = $term->name;
								$document_url_object['language']  = $term->field_iso_two_code[LANGUAGE_NONE][0]['value'];
							}
							if(isset($ids_document_url_entity->field_mime_type[LANGUAGE_NONE][0]['tid'])){
								$term = taxonomy_term_load($ids_document_url_entity->field_mime_type[LANGUAGE_NONE][0]['tid']);
								$document_url_object['mime_type']  = $term->name;
							}	
							if(isset($ids_document_url_entity->field_format[LANGUAGE_NONE][0]['tid'])){
								$term = taxonomy_term_load($ids_document_url_entity->field_format[LANGUAGE_NONE][0]['tid']);
								$document_url_object['format']  = $term->name;
							}
							$document_url_objects[] = $document_url_object;
						}
					}
					/* ULRs Array -- (NEW) */
					if(count($document_url_objects)){
						$xmlString = _idsims_solr_build_list_object_array_field('url', $document_url_objects);
						$document->setField('urls_array', $xmlString);
					}
				}
				/*
				 * ORGANISTION NODES
				 */
				if($node->type == 'ids_organisation'){
					
					/* Alternative name */
					if(isset($node->field_alternative_name[$field_language][0]['value'])){
						$document->setField('alternative_name', $node->field_alternative_name[$field_language][0]['value']);
					}

					/* Acronym */
					if(isset($node->field_acronym[$field_language][0]['value'])){
						$document->setField('acronym', $node->field_acronym[$field_language][0]['value']);
					}
					
					/* Alternative acronym */
					if(isset($node->field_alternative_acronym[$field_language][0]['value'])){
						$document->setField('alternative_acronym', $node->field_alternative_acronym[$field_language][0]['value']);
					}
					
					/* Organisation type */
					if(isset($node->field_organisation_type[$field_language][0]['value'])){
						$document->setField('organisation_type', $node->field_organisation_type[$field_language][0]['value']);
					}
					
					/* Organisation URL */
					if(isset($node->field_organisation_url[$field_language][0]['value'])){
						$document->setField('organisation_url', $node->field_organisation_url[$field_language][0]['value']);
					}
					
					/* Location country */
					if(isset($node->field_location_country[$field_language][0]['tid'])){
						$country_term = taxonomy_term_load($node->field_location_country[$field_language][0]['tid']);
						$document->setField('location_country', $country_term->name);
					}	

					/* Licence type */
					if(isset($node->field_licence_type_term[$field_language][0]['tid'])){
						$term = taxonomy_term_load($node->field_licence_type_term[$field_language][0]['tid']);
						$document->setField('licence_type', $term->name);
					}	
									
					/* Has hosting copyright clearance */
					if(isset($node->field_has_hosting_copyright[$field_language][0]['value'])){
						$document->setField('copyright_clearance', $node->field_has_hosting_copyright[$field_language][0]['value']);
					}
					
					/* Has redistribute copyright clearance */
					if(isset($node->field_has_redistribute_copyright[$field_language][0]['value'])){
						$document->setField('redistribute_clearance', $node->field_has_redistribute_copyright[$field_language][0]['value']);
					}
					
					/* Permission to host information */
					if(isset($node->field_permission_to_host_info[$field_language][0]['value'])){
						$document->setField('permission_to_host_info', $node->field_permission_to_host_info[$field_language][0]['value']);
					}
										
					/* Logo is either an uploaded file (Drupal file path) or a remote URL (text) (NEW)*/
					$the_url = '';
					if(isset($node->field_logo_image[LANGUAGE_NONE][0]['uri'])){
						$uri = $node->field_logo_image[LANGUAGE_NONE][0]['uri'];
						$full_uri = file_create_url($uri);
						$the_url = $full_uri;
					} else {
						$the_url = $node->field_logo_url[LANGUAGE_NONE][0]['value'];
					}
					if($the_url){
						$document->setField('logo_url', $the_url);
					}
							
				}
			}
		}
	}

}

/*
 * Format drupal field dates for Solr index
 */
function _idsims_solr_drupal_field_date_to_solr_friendly_date($drupal_field_date = FALSE){
	$drupal_field_date_arr = explode(' ', $drupal_field_date);
	return $drupal_field_date_arr[0] . 'T' . $drupal_field_date_arr[1] . 'Z';
}

/*
 * Format unix dates for Solr index
 */
function _idsims_solr_uxix_date_to_solr_friendly_date($unix_date = FALSE){
	$date_format = "Y-m-d\Th:i:s\Z";
	if(!$unix_date){
		return date($date_format);
	}
	return date($date_format, $unix_date);
}

/*
 * Build the category object array
 */
function _idsims_solr_build_category_object_arr($tid = FALSE, $term = FALSE, $category_ref){
	if(!$term){
		if(!$tid){
			return FALSE;
		}
		$term = taxonomy_term_load($tid);
	}
	$category_object = array();
	if(isset($term->field_object_id[LANGUAGE_NONE][0]['value'])){
		$category_object_id = $term->field_object_id[LANGUAGE_NONE][0]['value'];
		$category_object['object_id'] = $category_object_id;
		$category_object['object_type'] = $category_ref;
	} else {
		return FALSE;
	}
	$category_object['object_name'] = $term->name;
	if($category_ref == 'country'){
		$alternative_name = $term->name;
		if(isset($term->field_alternative_name[LANGUAGE_NONE][0]['value'])){
			$alternative_name = $term->field_alternative_name[LANGUAGE_NONE][0]['value'];
		}
		$category_object['alternative_name'] = $alternative_name;
		$category_object['iso_two_letter_code'] = $term->field_iso_two_code[LANGUAGE_NONE][0]['value'];
	} else {
		$category_object['level'] = _idsims_main_get_term_depth($term->tid);
	}
	if(isset($term->field_archived[LANGUAGE_NONE][0]['value'])){
		$category_object['archived'] = ($term->field_archived[LANGUAGE_NONE][0]['value']) ? 'true':'false';
	}
	return $category_object;
}

/*
 * Build the fields for categories. Regions, Themes, Subjects
 */
function _idsims_solr_build_category_fields(&$document, $node, $category_ref, $site_machine_name = '', $object_xml = TRUE){
	$category_ref_field = 'field_';
	if($site_machine_name){
		$category_ref_field .= $site_machine_name . '_';
	}
	$category_ref_field .= $category_ref . 's';
	$category_ref_field_arr = array($category_ref_field);
	if($category_ref == 'subject'){
		/* If this is the subjects category then bung the collections data in there as well for backwards compatibility */
		$category_ref_field_arr[] = 'field_collections';
	}
	$category_objects = array();
	foreach($category_ref_field_arr as $category_ref_field){
		foreach($node->{$category_ref_field}[LANGUAGE_NONE] as $term_ref_item){
			$term = taxonomy_term_load($term_ref_item['tid']);
			$category_object = _idsims_solr_build_category_object_arr(FALSE, $term, $category_ref);
			if(isset($term->field_object_id[LANGUAGE_NONE][0]['value'])){
				$category_object_id = $term->field_object_id[LANGUAGE_NONE][0]['value'];
				$document->addField('category_' . $category_ref . '_ids', $category_object_id);
			}
			$document->addField('category_' . $category_ref . '_path', _idsims_main_get_term_path($term->tid));
			$category_object_output = _idsims_solr_build_list_object_output($category_object, $category_ref, $object_xml);
			$document->addField('category_' . $category_ref . '_objects', $category_object_output);
			if($category_object){
				$category_objects[] = $category_object;
			}
		}
	}
	if(count($category_objects)){
		$xmlString = _idsims_solr_build_list_object_array_field($category_ref, $category_objects);
		$document->setField('category_' . $category_ref . '_array', $xmlString);
	}
}

/*
 * Builds object array fields
 */
function _idsims_solr_build_list_object_array_field($list_ref, $list_objects){
	$xmlString = '<' . $list_ref . 'List>';
	foreach($list_objects as $list_object){
		$xmlString .= _idsims_solr_build_list_object_output($list_object, $list_ref);
	}
	$xmlString .= '</' . $list_ref . 'List>';
	return $xmlString;
}

/*
 * Builds object fields
 */
function _idsims_solr_build_list_object_output($list_object, $list_ref, $object_xml = TRUE){
	$outputString = '';
	foreach($list_object as $key => $value){
		if($object_xml){
			$outputString .= '<' . $key . '>';
			$outputString .= htmlspecialchars($value);
			$outputString .= '</' . $key . '>';
		} else {
			if($outputString){
				$outputString .= '|';
			}
			$outputString .= $value;
		}
	}
	if($object_xml){
		if($outputString){
			$outputString = '<' . $list_ref . '>' . $outputString .  '</' . $list_ref . '>';
		}
	}
	return $outputString;
}

/*
 * Get Old Oryx language ID from ISO code
 * Needs review ... do we need to preserve this ID?
 * What is it used for?
 */
function _idsims_solr_iso_code_to_ids_api_lang_id_for_drupal($lang_iso_code){
	$lang_code_arr = _idsims_main_get_oryx_id_iso_lang_arr();
	$lang_code_arr = array_flip($lang_code_arr);
	if(isset($lang_code_arr[$lang_iso_code])){
		return $lang_code_arr[$lang_iso_code];
	}
	return FALSE;
}

/*
 * Drupal vocab ids to old Oryx top level category IDs
 */
function _idsims_solr_get_oryx_id_top_level_categories($vocab_id){
	$top_level_categories = array();
	$top_level_categories[13] = 1; /* Eldis Regions */
	$top_level_categories[11] = 2; /* Eldis Themes */
	$top_level_categories[15] = 4; /* Eldis Subject */
	$top_level_categories[14] = 1; /* BRIDGE Regions */
	$top_level_categories[12] = 2; /* BRIDGE Themes */
	$top_level_categories[16] = 4; /* BRIDGE Subject */
	if(isset($top_level_categories[$vocab_id])){
		return $top_level_categories[$vocab_id];
	}
	return FALSE;
}

