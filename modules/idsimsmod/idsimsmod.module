<?php
/**
 * @file
 * Module for bespoke IDS IMS customisations
 */
define('IDSIMS_ENTITY_NEXT_ID_START', 100000);
/*
 * Constants for import term IDs etc
 */

define('IDSIMS_BRIDGE_ORGANISATION_ID', 2921);
define('IDSIMS_GROUPING_SOURCE_TID', 96375);
define('IDSIMS_GROUPING_PROJECT_TID', 96376);
define('IDSIMS_GROUPING_UPDATES_TID', 96380);
define('IDSIMS_GROUPING_UPDATES_2007_TID', 96381);
define('IDSIMS_GROUPING_UPDATES_2008_TID', 96382);
define('IDSIMS_GROUPING_UPDATES_2009_TID', 96383);
define('IDSIMS_GROUPING_UPDATES_2010_TID', 96384);
define('IDSIMS_GROUPING_UPDATES_2011_TID', 96385);
define('IDSIMS_GROUPING_UPDATES_2012_TID', 96386);
define('IDSIMS_GROUPING_UPDATES_2013_TID', 96387);
define('IDSIMS_GROUPING_UPDATES_2014_TID', 96388);

/*
 * Implimentation of hook_init()
 */
function idsimsmod_init() {
	drupal_add_js(drupal_get_path('module', 'idsimsmod').'/js/idsimsmod.js');
	drupal_add_css(drupal_get_path('module', 'idsimsmod').'/css/idsimsmod.css');
}


/**
 * Implement hook_menu()
 */
function idsimsmod_menu() {
	$items['admin/config/ids-ims'] = array(
    'title' => 'IDS IMS',
    'description' => 'Settings related to the IDS IMS.',
    'position' => 'left',
    'weight' => -15,
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('access administration pages'),
    'file' => 'system.admin.inc',
	);
	$items['admin/config/ids-ims/import-extras'] = array(
    'title' => 'Import additional fields from old IMS',
    'description' => 'Import any additional fields from the old Oyrx DB provided by custom XML feed',
	// 'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('idsimsmod_import_extras_form'),
	//  'file' => 'epdmod.admin.inc',
	);
	$items['admin/config/ids-ims/post-process'] = array(
    'title' => 'Post proccessing on imported Oryx data',
    'description' => 'Moving imported data into a more appropriate structure from shared fields due to limitations of Oryx system',
	// 'access callback' => 'user_access',
    'access arguments' => array('administer site configuration'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('idsimsmod_import_post_process_form'),
	//  'file' => 'epdmod.admin.inc',
	);
	return $items ;
}

/**
 * Build a form for Import Extras settings
 */
function idsimsmod_import_extras_form() {
	$form['#attributes'] = array(
    'enctype' => 'multipart/form-data'
    );
    $form['import_limit'] = array(
    '#title' => t('Import limit'),
    '#type'  => 'textfield',
    '#size' => 10,
    '#description' => t('The number of items to import. If left blank then all'), 
    '#default_value' => 5,   
    );
    $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Commence Import'),
    );
    return $form;
}

/**
 * Build a form for Import post process
 */
function idsimsmod_import_post_process_form() {
	$form['#attributes'] = array(
    'enctype' => 'multipart/form-data'
    );
    $form['import_limit'] = array(
    '#title' => t('Import limit'),
    '#type'  => 'textfield',
    '#size' => 10,
    '#description' => t('The number of items to import. If left blank then all'), 
    '#default_value' => 5,   
    );
    $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Commence Post Process'),
    );
    return $form;
}

function _idsimsmod_set_batch_jobs($batch_name, $batch_id, &$form, &$form_state){
	$import_limit = $form_state['values']['import_limit'];

	$batch = array(
    'title' => t($batch_name . ' ...'),
    'operations' => array(),
    'init_message' => t('Commencing'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('An error occurred during processing'),
    'finished' => 'idsimsmod_' . $batch_id . '_finished',
	);

	$query = new EntityFieldQuery();

	$query->entityCondition('entity_type', 'node')
	->entityCondition('bundle', 'ids_document')
	->propertyCondition('status', NODE_PUBLISHED)
	->addMetaData('account', user_load(1)); // Run the query as user 1.

	if($import_limit){
		$query->range(0,$import_limit);
	}

	$result = $query->execute();

	if (!empty($result['node'])) {
		$nids = array_keys($result['node']);
		foreach ($nids as $nid) {
			$batch['operations'][] = array('_idsimsmod_process_' . $batch_id, array($nid));
		}
	}

	batch_set($batch);
}

function idsimsmod_import_extras_form_submit(&$form, &$form_state) {
	_idsimsmod_set_batch_jobs('Importing Extra fields', 'import_extras', $form, $form_state);
}

function idsimsmod_import_post_process_form_submit(&$form, &$form_state) {
	_idsimsmod_set_batch_jobs('Import data post process', 'import_post_process', $form, $form_state);
}

/**
 * Process an asset for extra fields import
 */
function _idsimsmod_process_import_extras($nid, &$context) {
	$node = node_load($nid);
	$xml_feed_path_root = 'http://isudev.ids.ac.uk/devrob/oryx-extras/?xml=true&aid=';
	$assetid = substr($node->field_object_id[LANGUAGE_NONE][0]['value'], 1);/*remove 'A' at front of asset ID */
	$xml_feed_path_full = $xml_feed_path_root . $assetid;
	$field_data = idsimsmod_get_endpoint_response($xml_feed_path_full);
	$field_data = _idsimsmod_simpleXML2array($field_data);
	_idsimsmod_process_import_extras_update_node($node, $field_data);
	$context['message'] = t('Updating node %title : Asset ID = %assetid', array('%title' => $node->title, '%assetid' => $assetid));
}

function _idsimsmod_process_import_extras_update_node(&$node, &$field_data) {
	if(isset($field_data['field_publication_date_uncertain'])){
		$node->field_publication_date_uncertain[LANGUAGE_NONE] = array();
		$cnt = 0;
		foreach($field_data['field_publication_date_uncertain'] as $type => $value)
		{
			if($value){
				$node->field_publication_date_uncertain[LANGUAGE_NONE][$cnt]['value'] = $type;
				$cnt++;
			}
		}
	}
	node_save($node);
}

/**
 * Process an asset for post processing data reorganisation
 */
function _idsimsmod_process_import_post_process($nid, &$context) {
	$node = node_load($nid);
	$assetid = $node->field_object_id[LANGUAGE_NONE][0]['value'];
	_idsimsmod_process_import_post_process_update_node($node, $context);
	$context['message'] = t('Updating node %title : Asset ID = %assetid', array('%title' => $node->title, '%assetid' => $assetid));
}

function _idsimsmod_process_import_post_process_update_node(&$node, &$context) {
	/*
	 * Create node references from asset IDs
	 */
	$node_updated = FALSE;
	
	if(isset($node->field_publisher_id[LANGUAGE_NONE])){
		$node->field_publishers[LANGUAGE_NONE] = array();
		$cnt = 0;
		$organisation_assetid_arr = array();
		foreach($node->field_publisher_id[LANGUAGE_NONE] as $publisher_id)
		{
			$organisation_assetid_arr[] = $publisher_id['value'];
		}
		/* lookup organisation */
		$query = new EntityFieldQuery();
		$query->entityCondition('entity_type', 'node')
		->entityCondition('bundle', 'ids_organisation')
		->propertyCondition('status', NODE_PUBLISHED)
		->fieldCondition('field_object_id', 'value', $organisation_assetid_arr, 'IN')
		->addMetaData('account', user_load(1)); // Run the query as user 1.
			
		$result = $query->execute();

		if (!empty($result['node'])) {
			foreach($result['node'] as $organisation_nid => $organisation_node){
				$node->field_publishers[LANGUAGE_NONE][$cnt]['target_id'] = $organisation_nid;
				$node->field_publishers[LANGUAGE_NONE][$cnt]['entity'] = $organisation_node;
				$node->field_publishers[LANGUAGE_NONE][$cnt]['access'] = 1;
				$cnt++;
			}
		}
		$node_updated = TRUE;
	}
	
	if($node_updated){
		node_save($node);
	}

}


function _idsimsmod_simpleXML2array($xml)
{
	$array = json_decode(json_encode($xml), TRUE);
	return $array;
}

/**
 * Handle batch completion.
 */
function idsimsmod_import_extras_finished($success, $results, $operations) {
	return t('The import has completed.');
}

/**
 * Handle batch completion.
 */
function idsimsmod_import_post_process_finished($success, $results, $operations) {
	return t('The import post process has completed.');
}


/*
 * Implimentation of hook_form_alter()
 */
function idsimsmod_form_alter(&$form, &$form_state, $form_id) {
	if($form_id == 'ids_document_node_form'){
		if(arg(1) == 'add'){
			$first_day_of_year = format_date(strtotime('now'), 'custom', 'Y', 'UTC') . '-01-01 00:00:00';
			$form["field_publication_date"][LANGUAGE_NONE][0]['#default_value'] = array(
			    'value' => $first_day_of_year,
			    'timezone' => 'UTC',  
			    'timezone_db' => 'UTC',
			);
		}
	}
}


function idsimsmod_get_endpoint_response($endpoint_url){
	if (($response_xml_data = file_get_contents($endpoint_url))===false){
		echo "Error fetching XML\n";
	} else {
		libxml_use_internal_errors(true);
		$data = simplexml_load_string($response_xml_data);
		if (!$data) {
			echo "Error loading XML\n";
			foreach(libxml_get_errors() as $error) {
				echo "\t", $error->message;
			}
		} else {
			return $data;
		}
	}
	return false;
}


function idsimsmod_entity_presave($entity, $type) {
	/* Add an Object ID if there isn't one */
  	$field_language = field_language($type, $entity, 'field_object_id');
  	$objectid_set = TRUE;
    if(!isset($entity->field_object_id[$field_language])){
    	$objectid_set = FALSE;
    } elseif(!isset($entity->field_object_id[$field_language][0]['value'])){
    	$objectid_set = FALSE;
    } elseif(!$entity->field_object_id[$field_language][0]['value']){
    	$objectid_set = FALSE;
    }
    if(!$objectid_set){
    	$new_object_id_num = variable_get('idsims_entity_next_id', IDSIMS_ENTITY_NEXT_ID_START);
    	$new_object_id_num++;
    	$new_object_id = FALSE;
    	if($type == 'node'){
    		$new_object_id = 'A' . $new_object_id_num;
    	}
        if($type == 'taxonomy_term'){
        	if($entity->vocabulary_machine_name == 'ids_countries'){
        		$new_object_id = 'A' . $new_object_id_num;
        	} else {
        		$new_object_id = 'C' . $new_object_id_num;
        	}
    	}
    	if($new_object_id && isset($entity->field_object_id)){
	    	drupal_set_message('Object ID created for entity (' . $new_object_id . ')');
	    	$entity->field_object_id[$field_language][0]['value'] = $new_object_id;
			variable_set('idsims_entity_next_id', $new_object_id_num);
    	}
    }

}

